#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# default gosh_profile
# only read if etc/gosh_profile doesn't exist relative to the System property
# gosh.home or failing that the current directory.

# catch all exceptions from this script to avoid it aborting startup
#try {

  # ensure gogo commands are found first
  SCOPE = 'gogo:*'

  # add methods on BundleContext object as commands
  addcommand context ${.context}

  # add methods on System object as commands
  addcommand system (((${.context} getClass) getClassLoader) loadClass java.lang.System)

  # alias to print full stack trace
  e = { $exception printStackTrace }

  ## disable console auto-formatting of each result
  #  you will then need to explicitly use the 'format' command
  #  to print the result of commands that don't write to stdout.
  #.Gogo.format = false

  ## disable printing the formatted result of a command into pipelines
  #.Format.Pipe = false

  # set prompt
  prompt = 'helloworld> '

  __option_not_present = {
      res = true
      opts = $argv
      each $opts {
          arg = $it
          each ($.commandLine words) {
              if { ($it toString) equals ($arg toString) } {
                  res = false
              }
          }
      }
      $res
  }

  __load_class = {
      (($.reader class) classLoader) loadClass $1
  }

  __set_unset_arguments = {
      is_setopt = (($.commandLine words) get 0) equals "setopt"
      enums = ((__load_class 'org.jline.reader.LineReader$Option') enumConstants)
      candidates = new ArrayList
      each $enums {
          name = ${(GL)it/_/-}
          is_set = ($.reader isSet $it)
          neg = %(( if(is_setopt, is_set, not(is_set)) ))
          if { $neg } {
              name = "no-${name}"
          }
          if { not  { (($.commandLine words) subList 1 ($.commandLine wordIndex)) contains $name } } {
              $candidates add (new org.jline.reader.Candidate $name $name (if { $neg } { "unset" } { "set" }) null null null true)
          }
      }
      $candidates
  }

  complete -c gogo:history -e
  complete -c gogo:history -d "Show and manipulate command history"
  complete -c gogo:history -l clear --description "Clear history" -n '__option_not_present --clear'
  complete -c gogo:history -l save --description "Save history" -n '__option_not_present --save'

  # print welcome message
  __resolve_uri = {
    uri = $1
    path = $2
    if { "$uri" startsWith "jar:" } /* then */ {
      idx = ("$uri" indexOf "!")
      p1 = ("$uri" substring 0 $idx)
      p2 = "!"
      p3 = (new java.net.URI ("$uri" substring %(idx+1))) resolve $path
      "$p1$p2$p3"
    } /* else */ {
      $uri resolve $path
    }
  }

  # print welcome message, unless we're explicitly told not to...
  #cat (new java.net.URL ($0 toURL) motd)
#} {
#    echo "$0: ERROR: $exception"
#}

# end
